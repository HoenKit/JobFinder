@page
@model JobFinder.Pages.RegisterJobSeekerModel
@{
    ViewData["Title"] = "Fill Job Seeker Form";
}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-5 col-md-6 col-sm-12">
            <section class="card shadow-lg p-4">
                <h2 class="text-center mb-4">@ViewData["Title"]</h2>
                @if (!ModelState.IsValid)
                {
                    <div class="alert alert-danger">
                        <ul>
                            @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <li>@error.ErrorMessage</li>
                            }
                        </ul>
                    </div>
                }
                <form method="post" enctype="multipart/form-data" id="addressForm">
                    <div class="form-group">
                        <label for="FirstName">First Name</label>
                        <input type="text" id="FirstName" name="FirstName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="LastName">Last Name</label>
                        <input type="text" id="LastName" name="LastName" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="Birthday">Birthday</label>
                        <input type="date" id="Birthday" name="Birthday" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="province">Province/City</label>
                        <select id="province" class="form-control" required>
                            <option value="">Select a province/city</option>
                        </select>
                    </div> 

                    <div class="form-group">
                        <label for="district">District</label>
                        <select id="district" name="district" class="form-control" required>
                            <option value="">Select a district</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="addressDetail">Address</label>
                        <input type="text" id="addressDetail" name="addressDetail" class="form-control" required />
                    </div>

                    <!-- Hidden field to store the concatenated full address -->
                    <input type="hidden" id="fullAddress" name="fullAddress" />

                    <div class="form-group">
                        <label for="EducationLevel">Education Level</label>
                        <select id="EducationLevel" name="EducationLevel" class="form-control" required>
                            <option value="">Select</option>
                            <option value="High School">High School</option>
                            <option value="Associate Degree">Associate Degree</option>
                            <option value="Bachelor's Degree">Bachelor's Degree</option>
                            <option value="Master's Degree">Master's Degree</option>
                            <option value="Doctorate">Doctorate</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="Specialized">Specialized</label>
                        <input type="text" id="Specialized" name="Specialized" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="Experience">Experience (Years)</label>
                        <input type="number" id="Experience" name="Experience" class="form-control" min="1" required />
                    </div>

                    <div class="form-group">
                        <label for="CV">Upload CV</label>
                        <input type="file" id="CV" name="CV" class="form-control" required />
                    </div>

                    <div class="form-group">
                        <label for="JobPositionId">Job Position:</label>
                        <select id="JobPositionId" name="JobPositionId" class="form-control" required>
                            <option value="">Select Position</option>
                            @if (Model.JobPositions != null && Model.JobPositions.Any())
                            {
                                foreach (var position in Model.JobPositions)
                                {
                                    <option value="@position.Id">@position.JobPositionName</option>
                                }
                            }
                            else
                            {
                                <option value="">No positions available</option>
                            }
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </section>
        </div>
    </div>
</div>

<script>
    async function fetchProvinces() {
        try {
            const response = await fetch("https://provinces.open-api.vn/api/p/");
            const provinces = await response.json();

            console.log(provinces); // Log the fetched provinces to check the data

            const provinceSelect = document.getElementById("province");
            provinceSelect.innerHTML = ''; // Clear previous options

            // Ensure the first option is a prompt for selection
            const defaultOption = document.createElement("option");
            console.log(12,provinceSelect);
            defaultOption.value = "";
            defaultOption.textContent = "Select a province/city";
            provinceSelect.appendChild(defaultOption);

            // Check if provinces exist
            if (Array.isArray(provinces) && provinces.length > 0) {
                provinces.forEach(province => {
                    const option = document.createElement("option");
                    option.value = province.code; // Assign province code as the value
                    option.textContent = province.name; // Assign province name as the display text
                    provinceSelect.appendChild(option); // Append option to the dropdown
                });
            } else {
                console.log("No provinces found."); // Log if no provinces are found
            }
        } catch (error) {
            console.error("Error fetching provinces:", error); // Log any errors
        }

    }



    async function fetchDistricts(provinceCode) {
        const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
        const provinceData = await response.json();

        console.log(provinceData); // Add this line to log the response

        const districtSelect = document.getElementById("district");
        districtSelect.innerHTML = '<option value="">Select a district</option>'; // Reset district options

        // Check if districts exist
        if (provinceData.districts && provinceData.districts.length > 0) {
            provinceData.districts.forEach(district => {
                const option = document.createElement("option");
                option.value = district.name; // Use name for concatenation later
                option.textContent = district.name;
                districtSelect.appendChild(option);
            });
        } else {
            console.log("No districts found for this province."); // Log message for no districts
        }
    }

    // Event listener for province selection change
    document.getElementById("province").addEventListener("change", function () {
        const provinceCode = this.value;
        if (provinceCode) {
            fetchDistricts(provinceCode);
        } else {
            document.getElementById("district").innerHTML = '<option value="">Select a district</option>'; // Reset district options
        }
    });

    // Concatenate full address when the form is submitted
    document.getElementById('addressForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent actual form submission

        const addressDetail = document.getElementById('addressDetail').value;
        const district = document.getElementById('district').value;
        const province = document.getElementById('province').options[document.getElementById('province').selectedIndex].text;

        if (addressDetail && district && province) {
            const fullAddress = `${addressDetail}, ${district}, ${province}`;
            document.getElementById('fullAddress').value = fullAddress;

            console.log('Full Address:', fullAddress);

            // Now you can submit the form or send data via an API call
            this.submit(); // Submit form after setting fullAddress
        } else {
            alert('Please fill out all address fields.');
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
        fetchProvinces(); // Fetch provinces once the DOM is fully loaded
    });
</script>

