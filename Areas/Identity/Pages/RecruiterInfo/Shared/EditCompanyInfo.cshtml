@page
@model JobFinder.Areas.Identity.Pages.RecruiterInfo.Shared.EditCompanyInfoModel
@{
    ViewData["Title"] = "Edit Company Information";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - JobFinder</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/JobFinder.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="/assets/css/style.css">
</head>

<body>
    <main class="container mt-5">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success" id="successMessage">
                @TempData["SuccessMessage"]
            </div>
        }
        else if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }
        <div class="row">
            <div class="col-md-8 col-sm-12 mx-auto">
                <form id="profile-form" method="post" enctype="multipart/form-data">
                    <!-- Username and Phone number row -->
                    <div class="row mb-3">
                        <div class="col-md-6 col-sm-12">
                            <div class="form-floating">
                                <input asp-for="Recruiter.CompanyName" class="form-control" placeholder="Company Name" />
                                <label asp-for="Recruiter.CompanyName">Company Name</label>
                                <span asp-validation-for="Recruiter.CompanyName" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="form-floating">
                                <input asp-for="Recruiter.CompanyPhone" class="form-control" placeholder="Phone number" />
                                <label asp-for="Recruiter.CompanyPhone">Phone</label>
                                <span asp-validation-for="Recruiter.CompanyPhone" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6 col-sm-12">
                            <div class="form-floating">
                                <input asp-for="Recruiter.CompanyEmail" class="form-control" placeholder="Email Company" />
                                <label asp-for="Recruiter.CompanyEmail">Email Company</label>
                                <span asp-validation-for="Recruiter.CompanyEmail" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="form-floating">
                                <input asp-for="Recruiter.CompanyWebsite" class="form-control" placeholder="Website" />
                                <label asp-for="Recruiter.CompanyWebsite">Website Company</label>
                                <span asp-validation-for="Recruiter.CompanyWebsite" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="form-floating">
                                <input asp-for="Recruiter.StaffSize" class="form-control" placeholder="Staff Size" />
                                <label asp-for="Recruiter.StaffSize">Staff Size(people)</label>
                                <span asp-validation-for="Recruiter.StaffSize" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <hr />
                    <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="mb-3">
                                        <label class="form-label">Province/City</label>
                                        <select id="province" class="form-control">
                                            <option value="">Select a province/city</option>
                                            <!-- Populate with provinces/cities -->
                                        </select>
                                        <span class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label class="control-label">District</label>
                                        <select id="district" name="Input.District" class="form-control">
                                            <option value="">Select a district</option>
                                            <!-- Populate with districts -->
                                        </select>
                                        <span class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label for="addressDetail">Address</label>
                                        <input type="text" id="addressDetail" name="addressDetail" class="form-control" placeholder="Please enter your Address." />
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button style="background-color: #fb246a;" type="button" class="btn btn-primary" id="saveAddressButton">Save changes</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Address field with modal -->
                    <div class="form-floating mb-3 position-relative">
                        <input asp-for="Recruiter.Address" id="Input.Address" class="form-control" readonly />
                        <label asp-for="Recruiter.Address">Address</label>
                        <span asp-validation-for="Recruiter.Address" class="text-danger"></span>
                        <a href="#" class="position-absolute" style="top: -1px; right: 7px" data-bs-toggle="modal" data-bs-target="#editAddressModal">
                            <img src="https://static.vecteezy.com/system/resources/previews/019/552/595/non_2x/sign-up-icon-signup-square-box-on-transparent-background-free-png.png" alt="Edit Address" style="width: 25px; height: 14px;">
                        </a>
                    </div>

                    <br>

                    <div>
                        <label>Company Description</label>
                        <div id="companyDescriptionEditor"
                             contenteditable="true"
                             style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; min-height: 100px; max-width: 100%;"
                             oninput="updateCompanyDescription()">
                            @Model.Recruiter.CompanyDescription
                        </div>
                        <input type="hidden" id="CompanyDescription" name="CompanyDescription" />
                    </div>

                    <!-- avatar Upload -->
                    <div class="form-group mb-3">
                        <label for="UploadAvatar">Upload avatar</label>
                        <input type="file" id="UploadAvatar" name="UploadAvatar" class="form-control" />
                    </div>

                    <button style="background-color:#fb246a" id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
                </form>
            </div>
        </div>
    </main>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js"></script>

    <script>
        $(document).ready(function () {
            if ($('#successMessage').length) {
                $('#successMessage').show();
                console.log("Displaying success message");
            }
        });

        function updateCompanyDescription() {
            const description = document.getElementById('companyDescriptionEditor').innerText;
            document.getElementById('CompanyDescription').value = description;
        }

        document.getElementById('profile-form').addEventListener('submit', function (event) {
            let isValid = true;
            let errorMessages = [];

            // Validate CompanyName (no special characters, length between 3-50)
            const companyName = document.getElementById('Recruiter_CompanyName').value;
            const companyNamePattern = /^[a-zA-Z\s]{3,50}$/;
            if (!companyNamePattern.test(companyName)) {
                errorMessages.push("Please enter a valid Company Name (only letters and spaces, 3-50 characters).");
                isValid = false;
            }

            // Validate CompanyPhone (should contain only numbers, exactly 10 digits)
            const companyPhone = document.getElementById('Recruiter_CompanyPhone').value;
            const phonePattern = /^\d{10}$/;
            if (!phonePattern.test(companyPhone)) {
                errorMessages.push("Please enter a valid Phone Number (exactly 10 digits).");
                isValid = false;
            }

            // Validate StaffSize (integer between 1 and 10000)
            const staffSize = document.getElementById('Recruiter_StaffSize').value;
            const staffSizePattern = /^[1-9]\d{0,3}$/;
            if (staffSize && !staffSizePattern.test(staffSize)) {
                errorMessages.push("Please enter a valid Staff Size (number between 1 and 10000).");
                isValid = false;
            }

            // Validate CompanyWebsite (valid URL format)
            const website = document.getElementById('Recruiter_CompanyWebsite').value;
            const websitePattern = /^(https?:\/\/)?([\w\-]+(\.[\w\-]+)+)(\/[\w\-.~:\/?#\[\]!$&'()*+,;=%]*)?$/;
            if (website && !websitePattern.test(website)) {
                errorMessages.push("Please enter a valid website URL.");
                isValid = false;
            }

            // Display all error messages if there are any
            if (!isValid) {
                event.preventDefault();
                alert(errorMessages.join("\n"));
            }
        });


        document.addEventListener("DOMContentLoaded", function () {
            fetchProvinces();

            function setModalFields() {
                const Address = document.getElementById('Input.Address').value;
                const parts = Address.split(', '); // Split the full address into parts
                if (parts.length >= 3) {
                    document.getElementById('addressDetail').value = parts[0]; // Address
                    document.getElementById('district').value = parts[1]; // District
                    document.getElementById('province').value = parts[2]; // Province
                } else {
                    // Handle case where parts are not sufficient
                    document.getElementById('addressDetail').value = '';
                    document.getElementById('district').value = '';
                    document.getElementById('province').value = '';
                }
            }

            async function fetchProvinces() {
                try {
                    const response = await fetch("https://provinces.open-api.vn/api/p/");
                    const provinces = await response.json();

                    const provinceSelect = document.getElementById("province");
                    provinceSelect.innerHTML = '';

                    const defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.textContent = "Select a province/city";
                    provinceSelect.appendChild(defaultOption);

                    provinces.forEach(province => {
                        const option = document.createElement("option");
                        option.value = province.name;
                        option.textContent = province.name;
                        option.setAttribute("data-code", province.code);
                        provinceSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error("Error fetching provinces:", error);
                }
            }

            async function fetchDistricts(provinceName) {
                const provinceSelect = document.getElementById("province");
                const selectedOption = provinceSelect.options[provinceSelect.selectedIndex];
                const provinceCode = selectedOption.getAttribute("data-code");

                try {
                    const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
                    const provinceData = await response.json();

                    const districtSelect = document.getElementById("district");
                    districtSelect.innerHTML = '<option value="">Select a district</option>';

                    if (provinceData.districts && provinceData.districts.length > 0) {
                        provinceData.districts.forEach(district => {
                            const option = document.createElement("option");
                            option.value = district.name;
                            option.textContent = district.name;
                            districtSelect.appendChild(option);
                        });
                    }
                } catch (error) {
                    console.error("Error fetching districts:", error);
                }
            }

            document.getElementById("province").addEventListener("change", function () {
                const provinceName = this.value;
                if (provinceName) {
                    fetchDistricts(provinceName);
                }
            });


            document.getElementById("saveAddressButton").addEventListener("click", function () {
                const address = document.getElementById('addressDetail').value;
                const district = document.getElementById('district').value;
                const provinceSelect = document.getElementById('province');
                const province = provinceSelect.options[provinceSelect.selectedIndex].text;


                if (address && district && province) {
                    const Address = `${address}, ${district}, ${province}`;

                    document.getElementById('Input.Address').value = Address;

                    $('#editAddressModal').modal('hide');
                } else {
                    alert("Please fill all fields before saving.");
                }
            });


            document.getElementById('profile-form').addEventListener('submit', function (event) {

                const Address = document.getElementById('Input.Address').value;

                if (!Address) {
                    alert("Please enter the full address before saving.");
                    event.preventDefault();
                }
            });
        });
    </script>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
    }
</body>
</html>
