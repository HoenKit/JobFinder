@page
@model JobFinder.Areas.Identity.Pages.RecruiterInfo.Shared.CreateRecruiterJobPostingModel
@{
    ViewData["Title"] = "Create Job Posting";
}

<div class="container mt-5">
    <div class="card shadow-sm p-4">
        <a asp-area="Identity" asp-page="/RecruiterInfo/Index" class="position-absolute" style="top: -1px; left: 7px">
            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT7yw_GcS_FZFbuiXP4wFtDzUipgJFyuXbiQw&s" alt="Back" style="width: 15px; height: 15px">
        </a>
        <h2 class="mb-4 text-center">@ViewData["Title"]</h2>

        @if (Model.CompanyImage != null)
        {
            <div class="text-center mb-4">
                <h5>Company Image</h5>
                <img src="@Model.CompanyImage" alt="Company Image" class="img-fluid rounded" style="max-width: 200px;" />
            </div>
        }

        <form method="post" id="JobPostingForm">
            <!-- Form Fields -->
            <div class="form-group mb-3">
                <label asp-for="Input.JobTitle" class="form-label fw-semibold">Job Title</label>
                <input asp-for="Input.JobTitle" class="form-control" placeholder="Enter the job title" />
                <span asp-validation-for="Input.JobTitle" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Input.JobDescription" class="form-label fw-semibold">Job Description</label>
                <textarea asp-for="Input.JobDescription" class="form-control" rows="4" placeholder="Describe the job role and responsibilities"></textarea>
                <span asp-validation-for="Input.JobDescription" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Input.RequiredLevel" class="form-label fw-semibold">Required Level</label>
                <input asp-for="Input.RequiredLevel" class="form-control" placeholder="Enter required education level" />
                <span asp-validation-for="Input.RequiredLevel" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Input.RequiredExperience" class="form-label fw-semibold">Required Experience</label>
                <input asp-for="Input.RequiredExperience" class="form-control" placeholder="Enter required experience" />
                <span asp-validation-for="Input.RequiredExperience" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label for="province">Province/City</label>
                <select id="province" class="form-control" required>
                    <option value="">Select a province/city</option>
                </select>
            </div>

            <div class="form-group">
                <label for="district">District</label>
                <select id="district" name="district" class="form-control" required>
                    <option value="">Select a district</option>
                </select>
            </div>

            <div class="form-group mb-3">
                <label for="LocationDetail" class="form-label fw-semibold">Job Location</label>
                <input type="text" id="LocationDetail" name="LocationDetail" class="form-control" placeholder="Enter the job location" required />
            </div>

            <input type="hidden" id="fullJobLocation" name="fullJobLocation" />

            <div class="form-group mb-3">
                <label asp-for="Input.Salary" class="form-label fw-semibold">Salary</label>
                <input asp-for="Input.Salary" type="number" class="form-control" placeholder="Enter salary range" />
                <span asp-validation-for="Input.Salary" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Input.ExpirationDate" class="form-label fw-semibold">Expiration Date</label>
                <input asp-for="Input.ExpirationDate" type="date" class="form-control" />
                <span asp-validation-for="Input.ExpirationDate" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label asp-for="Input.Vacancy" class="form-label fw-semibold">Vacancy</label>
                <input asp-for="Input.Vacancy" type="number" class="form-control" placeholder="Enter number of vacancies" />
                <span asp-validation-for="Input.Vacancy" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label for="JobPositionId" class="form-label">Job Position</label>
                <select id="JobPositionId" name="JobPositionId" class="form-control" required>
                    <option value="">Select Position</option>
                    @if (Model.JobPositions != null && Model.JobPositions.Any())
                    {
                        foreach (var position in Model.JobPositions)
                        {
                            var isSelected = (position.Id == Model.JobPositionId) ? "selected" : "";
                            <option value="@position.Id">
                                @position.JobPositionName
                            </option>
                        }
                    }
                    else
                    {
                        <option value="">No positions available</option>
                    }
                </select>
                <span asp-validation-for="JobPositionId" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label for="JobTypeId" class="form-label">Job Type</label>
                <select id="JobTypeId" name="JobTypeId" class="form-control" required>
                    <option value="">Select Type</option>
                    @if (Model.JobType != null && Model.JobType.Any())
                    {
                        foreach (var type in Model.JobType)
                        {
                            var isSelected = (type.Id == Model.JobPositionId) ? "selected" : "";
                            <option value="@type.Id">@type.JobTypeName</option>
                        }
                    }
                    else
                    {
                        <option value="">No types available</option>
                    }
                </select>
                <span asp-validation-for="JobTypeId" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label for="JobNatureId" class="form-label">Job Nature</label>
                <select id="JobNatureId" name="JobNatureId" class="form-control" required>
                    <option value="">Select Nature</option>
                    @if (Model.JobNature != null && Model.JobNature.Any())
                    {
                        foreach (var nature in Model.JobNature)
                        {
                            var isSelected = (nature.Id == Model.JobNatureId) ? "selected" : "";
                            <option value="@nature.Id">
                                @nature.JobNatureName
                            </option>
                        }
                    }
                    else
                    {
                        <option value="">No natures available</option>
                    }
                </select>
                <span asp-validation-for="JobNatureId" class="text-danger"></span>
            </div>

            <div class="text-center">
                <button style="border-radius: 10px; background: #fb246a" type="submit" class="btn btn-primary px-5">Create</button>
            </div>
        </form>
    </div>
</div>

<script>
    async function fetchProvinces() {
        try {
            const response = await fetch("https://provinces.open-api.vn/api/p/");
            const provinces = await response.json();

            console.log(provinces); // Log the fetched provinces to check the data

            const provinceSelect = document.getElementById("province");
            provinceSelect.innerHTML = ''; // Clear previous options

            // Ensure the first option is a prompt for selection
            const defaultOption = document.createElement("option");
            console.log(12, provinceSelect);
            defaultOption.value = "";
            defaultOption.textContent = "Select a province/city";
            provinceSelect.appendChild(defaultOption);

            // Check if provinces exist
            if (Array.isArray(provinces) && provinces.length > 0) {
                provinces.forEach(province => {
                    const option = document.createElement("option");
                    option.value = province.code; // Assign province code as the value
                    option.textContent = province.name; // Assign province name as the display text
                    provinceSelect.appendChild(option); // Append option to the dropdown
                });
            } else {
                console.log("No provinces found."); // Log if no provinces are found
            }
        } catch (error) {
            console.error("Error fetching provinces:", error); // Log any errors
        }

    }



    async function fetchDistricts(provinceCode) {
        const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
        const provinceData = await response.json();

        console.log(provinceData); // Add this line to log the response

        const districtSelect = document.getElementById("district");
        districtSelect.innerHTML = '<option value="">Select a district</option>'; // Reset district options

        // Check if districts exist
        if (provinceData.districts && provinceData.districts.length > 0) {
            provinceData.districts.forEach(district => {
                const option = document.createElement("option");
                option.value = district.name; // Use name for concatenation later
                option.textContent = district.name;
                districtSelect.appendChild(option);
            });
        } else {
            console.log("No districts found for this province."); // Log message for no districts
        }
    }

    // Event listener for province selection change
    document.getElementById("province").addEventListener("change", function () {
        const provinceCode = this.value;
        if (provinceCode) {
            fetchDistricts(provinceCode);
        } else {
            document.getElementById("district").innerHTML = '<option value="">Select a district</option>'; // Reset district options
        }
    });

    // Concatenate full address when the form is submitted
    document.getElementById('JobPostingForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent actual form submission temporarily

        const LocationDetail = document.getElementById('LocationDetail').value;
        const district = document.getElementById('district').value;
        const province = document.getElementById('province').options[document.getElementById('province').selectedIndex].text;

        if (LocationDetail && district && province) {
            const fullJobLocation = `${LocationDetail}, ${district}, ${province}`;
            document.getElementById('fullJobLocation').value = fullJobLocation;

            console.log('full JobLocation :', fullJobLocation);

            // Submit the form after setting fullJobLocation
            this.submit();
        } else {
            alert('Please fill out all address fields.');
        }
    });



    document.addEventListener("DOMContentLoaded", function () {
        fetchProvinces(); // Fetch provinces once the DOM is fully loaded
    });
</script>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
