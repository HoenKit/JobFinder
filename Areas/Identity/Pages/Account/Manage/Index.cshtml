@page
@model IndexModel
@{
    ViewData["Title"] = "Profile";
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<style>
    /* Ensuring that the form and its contents are fully responsive */
    #profile-form {
        width: 100%;
        max-width: 100%;
    }

    /* Default layout for larger screens */
    .profile-container {
        display: flex;
        flex-wrap: wrap;
    }

    /* Media query for screens smaller than 768px (tablets and smaller devices) */
    @@media (max-width: 768px) {
        .profile-container {
            flex-direction: column;
            padding: 10px;
        }
    }

    /* Ensure that input fields take full width on small screens */
    input, select, .form-floating {
        width: 100%;
    }

    /* Additional margin adjustments on small screens */
    @@media (max-width: 576px) {
        .mb-3 {
            margin-bottom: 15px;
        }
    }
    /* Add border around the entire form */
    #profile-form {
        width: 100%;
        max-width: 100%;
        border: 1px solid #ccc; /* Adds a light gray border */
        padding: 20px; /* Adds padding inside the border */
        border-radius: 10px; /* Optional: Adds rounded corners */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Optional: Adds a subtle shadow */
    }

    /* Add border to input fields and select dropdowns */
    input, select, .form-floating {
        border: 1px solid #ccc; /* Ensures a uniform border for input fields */
        border-radius: 5px; /* Optional: Adds slightly rounded corners */
    }

        /* Add focus effect for input fields */
        input:focus, select:focus {
            border-color: #fb246a; /* Changes the border color to match the button on focus */
            outline: none;
            box-shadow: 0 0 5px rgba(251, 36, 106, 0.5); /* Optional: Adds a subtle glow on focus */
        }

    /* Modal border styling */
    .modal-content {
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .btn {
        border-radius: 10px;
    }

    h5 {
        color: #fb246a;
    }
</style>

<h5>@ViewData["Title"]</h5>
<partial name="_StatusMessage" for="StatusMessage" />

<div class="row">
    <div class="col-md-8 col-sm-12 mx-auto">
        <form id="profile-form" method="post">
            <!-- Username and Phone number row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Username" class="form-control" placeholder="Username" disabled />
                        <label asp-for="Username">Username</label>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.PhoneNumber" class="form-control" placeholder="Phone number" required />
                        <label asp-for="Input.PhoneNumber">Phone</label>
                        <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- First name and Last name row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.FirstName" class="form-control" placeholder="First name" required />
                        <label asp-for="Input.FirstName">First name</label>
                        <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.LastName" class="form-control" placeholder="Last name" required />
                        <label asp-for="Input.LastName">Last name</label>
                        <span asp-validation-for="Input.LastName" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <hr />

            <!-- Education level and Birthday row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <select asp-for="Input.EducationLevel" class="form-control" required>
                            <option value="">Select Education Level</option>
                            <option value="High School">High School</option>
                            <option value="Associate Degree">Associate Degree</option>
                            <option value="Bachelor's Degree">Bachelor's Degree</option>
                            <option value="Master's Degree">Master's Degree</option>
                            <option value="Doctorate">Doctorate</option>
                        </select>
                        <label asp-for="Input.EducationLevel">Education</label>
                        <span asp-validation-for="Input.EducationLevel" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.Birthday" class="form-control" type="date" required />
                        <label asp-for="Input.Birthday">Birthday</label>
                        <span asp-validation-for="Input.Birthday" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- Specialization and Experience row -->
            <div class="row mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.Specialized" class="form-control" required />
                        <label asp-for="Input.Specialized">Specialization</label>
                        <span asp-validation-for="Input.Specialized" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-floating">
                        <input asp-for="Input.Experience" type="number" class="form-control" required />
                        <label asp-for="Input.Experience">Experience(y)</label>
                        <span asp-validation-for="Input.Experience" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <label class="form-label">Province/City</label>
                                <select id="province" class="form-control" required>
                                    <option value="">Select a province/city</option>
                                    <!-- Populate with provinces/cities -->
                                </select>
                                <span class="text-danger"></span>
                            </div>
                            <div class="mb-3">
                                <label class="control-label">District</label>
                                <select id="district" name="Input.District" class="form-control" required>
                                    <option value="">Select a district</option>
                                    <!-- Populate with districts -->
                                </select>
                                <span class="text-danger"></span>
                            </div>
                            <div class="mb-3">
                                <label for="addressDetail">Address</label>
                                <input type="text" id="addressDetail" name="addressDetail" class="form-control" placeholder="Please enter your Address." required />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button style="background-color: #fb246a;" type="button" class="btn btn-primary" id="saveAddressButton">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Address field with modal -->
            <div class="form-floating mb-3 position-relative">
                <input asp-for="Input.Address" id="Input.Address" class="form-control" required readonly />
                <label asp-for="Input.Address">Address</label>
                <span asp-validation-for="Input.Address" class="text-danger"></span>
                <a href="#" class="position-absolute" style="top: -1px; right: 7px" data-bs-toggle="modal" data-bs-target="#editAddressModal">
                    <img src="https://static.vecteezy.com/system/resources/previews/019/552/595/non_2x/sign-up-icon-signup-square-box-on-transparent-background-free-png.png" alt="Edit Address" style="width: 25px; height: 14px;">
                </a>
            </div>

            <button style="background-color:#fb246a" id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </form>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        fetchProvinces();

        function setModalFields() {
            const Address = document.getElementById('Input.Address').value;
            const parts = Address.split(', '); // Split the full address into parts
            if (parts.length >= 3) {
                document.getElementById('addressDetail').value = parts[0]; // Address
                document.getElementById('district').value = parts[1]; // District
                document.getElementById('province').value = parts[2]; // Province
            } else {
                // Handle case where parts are not sufficient
                document.getElementById('addressDetail').value = '';
                document.getElementById('district').value = '';
                document.getElementById('province').value = '';
            }
        }

    async function fetchProvinces() {
        try {
            const response = await fetch("https://provinces.open-api.vn/api/p/");
            const provinces = await response.json();

            const provinceSelect = document.getElementById("province");
            provinceSelect.innerHTML = '';

            const defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.textContent = "Select a province/city";
            provinceSelect.appendChild(defaultOption);

            provinces.forEach(province => {
                const option = document.createElement("option");
                option.value = province.name;
                option.textContent = province.name;
                option.setAttribute("data-code", province.code);
                provinceSelect.appendChild(option);
            });
        } catch (error) {
            console.error("Error fetching provinces:", error);
        }
    }

    async function fetchDistricts(provinceName) {
        const provinceSelect = document.getElementById("province");
        const selectedOption = provinceSelect.options[provinceSelect.selectedIndex];
        const provinceCode = selectedOption.getAttribute("data-code");

        try {
            const response = await fetch(`https://provinces.open-api.vn/api/p/${provinceCode}?depth=2`);
            const provinceData = await response.json();

            const districtSelect = document.getElementById("district");
            districtSelect.innerHTML = '<option value="">Select a district</option>';

            if (provinceData.districts && provinceData.districts.length > 0) {
                provinceData.districts.forEach(district => {
                    const option = document.createElement("option");
                    option.value = district.name;
                    option.textContent = district.name;
                    districtSelect.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Error fetching districts:", error);
        }
    }

    document.getElementById("province").addEventListener("change", function () {
        const provinceName = this.value;
        if (provinceName) {
            fetchDistricts(provinceName);
        }
    });


    document.getElementById("saveAddressButton").addEventListener("click", function () {
        const address = document.getElementById('addressDetail').value;
        const district = document.getElementById('district').value;
        const provinceSelect = document.getElementById('province');
        const province = provinceSelect.options[provinceSelect.selectedIndex].text;


        if (address && district && province) {
            const Address = `${address}, ${district}, ${province}`;

            document.getElementById('Input.Address').value = Address;

            $('#editAddressModal').modal('hide');
        } else {
            alert("Please fill all fields before saving.");
        }
    });


    document.getElementById('profile-form').addEventListener('submit', function (event) {

        const Address = document.getElementById('Input.Address').value;

        if (!Address) {
            alert("Please enter the full address before saving.");
            event.preventDefault();
        }
    });
        });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}